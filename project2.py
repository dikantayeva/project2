# -*- coding: utf-8 -*-
"""project2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-vIzKxUYWcoCeMKpT-aRiyDS-VCwLqX
"""

!pip install sentence-transformers

import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Filtered_Text_Pairs.csv")
df = df[["source_doc", "susp_doc", "label"]].copy()
df["label"] = df["label"].map({"yes": 1, "no": 0})
df.dropna(inplace=True)
df.head()

model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")

source_embeddings = model.encode(df["source_doc"].tolist(), show_progress_bar=True)
susp_embeddings = model.encode(df["susp_doc"].tolist(), show_progress_bar=True)

# Concatenate embeddings from both texts
X = np.hstack([source_embeddings, susp_embeddings])
y = df["label"].values

X_df = pd.DataFrame(X)
X_df["label"] = y
X_df.to_csv("sbert_text_pairs_with_labels.csv", index=False)
print("Saved as sbert_text_pairs_with_labels.csv")

files.download("sbert_text_pairs_with_labels.csv")

from google.colab import drive
drive.mount('/content/drive')

!pip install -q scikit-learn

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("sbert_text_pairs_with_labels.csv")
X = df.drop("label", axis=1).values
y = df["label"].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

print("Logistic Regression Results:")
print(classification_report(y_test, y_pred_lr))

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

print("Random Forest Results:")
print(classification_report(y_test, y_pred_rf))

def plot_confusion(y_true, y_pred, title):
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(title)
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

plot_confusion(y_test, y_pred_lr, "Confusion Matrix: Logistic Regression")
plot_confusion(y_test, y_pred_rf, "Confusion Matrix: Random Forest")